// Mocks generated by Mockito 5.3.2 from annotations
// in boilerplate/test/app_test/app_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:boilerplate/data/repositories/dog_image_random/dog_image_random_repository.dart'
    as _i3;
import 'package:boilerplate/services/log_service/log_service.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rest_client/rest_client.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDogImage_0 extends _i1.SmartFake implements _i2.DogImage {
  _FakeDogImage_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DogImageRandomRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDogImageRandomRepository extends _i1.Mock
    implements _i3.DogImageRandomRepository {
  MockDogImageRandomRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DogImage> getDogImageRandom() => (super.noSuchMethod(
        Invocation.method(
          #getDogImageRandom,
          [],
        ),
        returnValue: _i4.Future<_i2.DogImage>.value(_FakeDogImage_0(
          this,
          Invocation.method(
            #getDogImageRandom,
            [],
          ),
        )),
      ) as _i4.Future<_i2.DogImage>);
}

/// A class which mocks [LogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogService extends _i1.Mock implements _i5.LogService {
  MockLogService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void e(
    String? message,
    dynamic e,
    StackTrace? stack,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #e,
          [
            message,
            e,
            stack,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
